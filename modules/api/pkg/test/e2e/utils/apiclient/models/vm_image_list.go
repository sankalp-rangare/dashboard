// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMImageList VMImageList represents list of standard VM Images.
//
// swagger:model VMImageList
type VMImageList struct {

	// VM images
	VMImages map[string][]VMDiskImage `json:"vmImages,omitempty"`
}

// Validate validates this VM image list
func (m *VMImageList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVMImages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMImageList) validateVMImages(formats strfmt.Registry) error {
	if swag.IsZero(m.VMImages) { // not required
		return nil
	}

	for k := range m.VMImages {

		if err := validate.Required("vmImages"+"."+k, "body", m.VMImages[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.VMImages[k]); i++ {

			if err := m.VMImages[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmImages" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmImages" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// ContextValidate validate this VM image list based on the context it is used
func (m *VMImageList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVMImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMImageList) contextValidateVMImages(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.VMImages {

		for i := 0; i < len(m.VMImages[k]); i++ {

			if err := m.VMImages[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmImages" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmImages" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMImageList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMImageList) UnmarshalBinary(b []byte) error {
	var res VMImageList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
